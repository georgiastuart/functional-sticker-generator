import { Canvg } from 'https://cdn.skypack.dev/canvg@^4.0.0';
{# import 'fs' #}
{# const canvag = require("canvag"); #}
{# const fs = require("fs"); #}

export function generateJaggedEdge(start, end, depth, offset, seed) {
  // Random function from https://stackoverflow.com/a/19303725
  function random() {
    var x = Math.sin(seed++) * 10000;
    return x - Math.floor(x);
  }

  let edge = [start, end];
  let mid = {x: 0, y: 0}; 
  for (let i = 0; i < depth; i++) {
    let num_verticies = edge.length
    for (let j = num_verticies - 1; j > 0; j--) {
      mid.x = (edge[j - 1].x + edge[j].x) / 2;
      mid.y = (edge[j - 1].y + edge[j].y) / 2;
      let length = Math.sqrt(4 * mid.x * mid.x + 4 * mid.y * mid.y);
      let vec = {x: edge[j].y - edge[j - 1].y, y: edge[j].x - edge[j - 1].x};
      let mag = Math.sqrt(vec.x * vec.x + vec.y * vec.y);
      vec.x = vec.x / mag;
      vec.y = vec.y / mag;

      let changeMag = random() * offset;
      let changeDir = random() > 0.5 ? 1 : -1

      edge.splice(j, 0, {x: mid.x + changeDir * changeMag * mag * vec.x, y: mid.y + changeDir * changeMag * mag * vec.y})
    }
  }
  return edge;
}

export function stickerGenerator() {
{%- for sticker in stickers %}
  (function () {
    const canvas = document.getElementById("{{ sticker['name'].strip() }}");
    const ctx = canvas.getContext("2d");
    {%- if '.html.' in sticker['file'].strip() %}
    {%- with sticker=sticker %}
    const v = Canvg.fromString(ctx, `
    {% include './stickers/%s' % sticker['file'].strip() %}
    `);
    {%- endwith %}
    v.start();
    {% else %}
    {%- with sticker=sticker %}
    {% include './stickers/%s' % sticker['file'].strip() %}
    {%- endwith %}
    {%- endif %}
  })();
{%- endfor %}
}

// modified from https://gist.github.com/renancouto/4675192
var modifyColor = function(color, percent, lighten) {
  	var num = parseInt(color,16),
		amt = Math.round(2.55 * percent),
		R = (num >> 16) + lighten ? amt : -amt,
		B = (num >> 8 & 0x00FF) + lighten ? amt : -amt,
		G = (num & 0x0000FF) + lighten ? amt : -amt;

		return (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
};
